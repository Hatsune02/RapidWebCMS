package com.navi.backend.XMLParserLexer;
import java_cup.runtime.*;
import com.navi.backend.webController.*;
import com.navi.UI.*;
import javax.swing.*;
import java.util.*;

parser code
{:
    public Actions actions = new Actions();
    private boolean valid = true;
    public XMLParser(XMLLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme;
        if(s.value==null) lexeme = "Unknown";
        else lexeme = s.value.toString();

        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\tTipo: " + s.sym);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        DashBoard.ERRORS.add(err);
        valid = false;
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme;
        if(s.value==null) lexeme = "Unknown";
        else lexeme = s.value.toString();

        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        DashBoard.ERRORS.add(err);
        valid = false;
    }
:}

terminal ACCIONES, ACCION, NOMBRE, PARAMETROS, PARAMETRO, ETIQUETAS, ETIQUETA, VALOR, ATRIBUTOS, ATRIBUTO,
            NUEVO_SITIO_WEB, BORRRAR_SITIO_WEB, NUEVA_PAGINA, BORRAR_PAGINA, MODIFICAR_PAGINA,
            AGREGAR_COMPONENTE, BORRAR_COMPONENTE, MODIFICAR_COMPONENTE, ID, USUARIO_CREACION,
            FECHA_CREACION, FECHA_MODIFICACION, USUARIO_MODIFICACION, TITULO, SITIO, PADRE,
            PAGINA, CLASE,
            TEXTO, ALINEACION, COLOR, ORIGEN, ALTURA, ANCHO, ETIQUETAS_NOMBRE,
            SLASH, MAYOR, MENOR, EQUAL, UNKNOWN;

terminal String PARAM, CADENA;

non terminal actions, acciones,
            accion_open, accion_close,
            parameter_open, parameter_close,
            atributo_open, atributo_close;

non terminal AllActions accion;

non terminal ArrayList<AllActions> accionP;

non terminal ActionPA action_bodyPA;
non terminal ActionPE action_bodyPE;

non terminal Parameter parameter_p;
non terminal ArrayList<Parameter> parameters, parametrosP, action_bodyP;

non terminal Label etiqueta;
non terminal ArrayList<Label> etiquetas, etiquetaP;

non terminal Attribute attributes_p;
non terminal ArrayList<Attribute> atributos, atributoP;


start with actions;

actions ::= accion
            | acciones
            ;
acciones ::= MENOR ACCIONES MAYOR accionP:act MENOR SLASH ACCIONES MAYOR
            {:
            if(valid){
                for(var a: act){
                    a.execute();
                }
            }
            :}
            | error accionP MENOR ACCIONES MAYOR;
accionP ::= accion:a
            {:
            ArrayList<AllActions> allActions = new ArrayList<>();
            allActions.add(a);
            RESULT = allActions;
            :}
            | accionP:allActions accion:a
            {:
            allActions.add(a);
            RESULT = allActions;
            :}
            ;
accion ::= accion_open NUEVO_SITIO_WEB MAYOR action_bodyP:listP accion_close
            {:
            RESULT = new AllActions(actions, 1, listP, null, null);
            //actions.createSite(listP);
            :}
            | accion_open BORRRAR_SITIO_WEB MAYOR action_bodyP:listP accion_close
            {:
            RESULT = new AllActions(actions, 2, listP, null, null);
            //actions.deleteSite(listP);
            :}
            | accion_open NUEVA_PAGINA MAYOR action_bodyPE:a accion_close
            {:
            RESULT = new AllActions(actions, 3, null, null, a);
            //actions.createPage(a);
            :}
            | accion_open BORRAR_PAGINA MAYOR action_bodyP:listP accion_close
            {:
            RESULT = new AllActions(actions, 4, listP, null, null);
            //actions.deletePage(listP);
            :}
            | accion_open MODIFICAR_PAGINA MAYOR action_bodyPE:a accion_close
            {:
            RESULT = new AllActions(actions, 5, null, null, a);
            //actions.editPage(a);
            :}
            | accion_open AGREGAR_COMPONENTE MAYOR action_bodyPA:a accion_close
            {:
            RESULT = new AllActions(actions, 6, null, a, null);
            //actions.createComponent(a);
            :}
            | accion_open BORRAR_COMPONENTE MAYOR action_bodyP:listP accion_close
            {:
            RESULT = new AllActions(actions, 7, listP, null, null);
            //actions.deleteComponent(listP);
            :}
            | accion_open MODIFICAR_COMPONENTE MAYOR action_bodyPA:a accion_close
            {:
            RESULT = new AllActions(actions, 8, null, a, null);
            //actions.editComponent(a);
            :}
            | error accion_close
             ;
accion_open ::= MENOR ACCION NOMBRE EQUAL;
accion_close ::= MENOR SLASH ACCION MAYOR;
//ACCIONES
action_bodyP ::= parameters:listP
                {:
                RESULT = listP;
                :}
                ;
action_bodyPE ::= parameters:listP etiquetas:listE
                {:
                RESULT = new ActionPE(listP, listE);
                :}
                | etiquetas:listE parameters:listP
                {:
                RESULT = new ActionPE(listP, listE);
                :}
                | error etiquetas
                | error parameters
                ;
action_bodyPA ::= parameters:listP atributos:listA
              {:
              RESULT = new ActionPA(listP, listA);
              :}
              | atributos:listA parameters:listP
              {:
              RESULT = new ActionPA(listP, listA);
              :}
              | error atributos
              | error parameters
              ;
//PARAMETROS
parameters ::= MENOR PARAMETROS MAYOR parametrosP:list MENOR SLASH PARAMETROS MAYOR
            {:
            RESULT = list;
            :}
            |error MENOR SLASH PARAMETROS MAYOR
            ;
parametrosP ::= parameter_p:p
            {:
            ArrayList<Parameter> a = new ArrayList<>();
            a.add(p);
            RESULT = a;
            :}
            | parametrosP:a parameter_p:p
            {:
            a.add(p);
            RESULT = a;
            :}
            | error parameter_p
            ;
parameter_p ::= parameter_open ID MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("ID",p, pleft, pright);
            :}
            | parameter_open USUARIO_CREACION MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("USUARIO_CREACION",p, pleft, pright);
            :}
            | parameter_open FECHA_CREACION MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("FECHA_CREACION",p, pleft, pright);
            :}
            | parameter_open FECHA_MODIFICACION MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("FECHA_MODIFICACION",p, pleft, pright);
            :}
            | parameter_open USUARIO_MODIFICACION MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("USUARIO_MODIFICACION",p, pleft, pright);
            :}
            | parameter_open TITULO MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("TITULO",p, pleft, pright);
            :}
            | parameter_open SITIO MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("SITIO",p, pleft, pright);
            :}
            | parameter_open PADRE MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("PADRE",p, pleft, pright);
            :}
            | parameter_open PAGINA MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("PAGINA",p, pleft, pright);
            :}
            | parameter_open CLASE MAYOR PARAM:p parameter_close
            {:
            RESULT = new Parameter("CLASE",p, pleft, pright);
            :}
            | error parameter_close
            ;
parameter_open ::= MENOR PARAMETRO NOMBRE EQUAL
            ;
parameter_close ::= MENOR SLASH PARAMETRO MAYOR;

//ETIQUETAS
etiquetas ::= MENOR ETIQUETAS MAYOR etiquetaP:list MENOR SLASH ETIQUETAS MAYOR
            {:
            RESULT = list;
            :}
            | error MENOR SLASH ETIQUETAS MAYOR
            ;
etiquetaP ::= etiqueta:e
             {:
             ArrayList<Label> a = new ArrayList<>();
             a.add(e);
             RESULT = a;
             :}
            | etiquetaP:a etiqueta:e
             {:
             a.add(e);
             RESULT = a;
             :}
            ;
etiqueta ::= MENOR ETIQUETA VALOR EQUAL CADENA:c SLASH MAYOR
            {:
            RESULT = new Label(c, cleft, cright);
            :}
            ;
//ATRIBUTOS
atributos ::= MENOR ATRIBUTOS MAYOR atributoP:list MENOR SLASH ATRIBUTOS MAYOR
            {:
            RESULT = list;
            :}
            | error MENOR SLASH ATRIBUTOS MAYOR
            ;
atributoP ::= attributes_p:att
             {:
             ArrayList<Attribute> a = new ArrayList<>();
             a.add(att);
             RESULT = a;
             :}
             |
            atributoP:a attributes_p:att
            {:
            a.add(att);
            RESULT = a;
            :}
            | error attributes_p
            ;
attributes_p ::= atributo_open TEXTO MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("TEXTO",p, pleft, pright);
            :}
            | atributo_open ALINEACION MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("ALINEACION",p, pleft, pright);
            :}
            | atributo_open COLOR MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("COLOR",p, pleft, pright);
            :}
            | atributo_open ORIGEN MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("ORIGEN",p, pleft, pright);
            :}
            | atributo_open ALTURA MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("ALTURA",p, pleft, pright);
            :}
            | atributo_open ANCHO MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("ANCHO",p, pleft, pright);
            :}
            | atributo_open PADRE MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("PADRE",p, pleft, pright);
            :}
            | atributo_open ETIQUETAS_NOMBRE MAYOR PARAM:p atributo_close
            {:
            RESULT = new Attribute("ETIQUETAS",p, pleft, pright);
            :}
            | error atributo_close
            ;
atributo_open ::= MENOR ATRIBUTO NOMBRE EQUAL;
atributo_close ::= MENOR SLASH ATRIBUTO MAYOR;

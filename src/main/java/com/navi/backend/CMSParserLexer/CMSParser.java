
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.backend.CMSParserLexer;

import java_cup.runtime.*;
import com.navi.backend.queryController.*;
import com.navi.backend.XMLParserLexer.*;
import com.navi.UI.*;
import javax.swing.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CMSParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CMSParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CMSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CMSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\016\000\002\002\004\000\002\002\004\000\002\002" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\004\003\000\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\004\005\001\002\000\006\002\037\004" +
    "\005\001\002\000\012\005\013\006\012\007\010\010\011" +
    "\001\002\000\004\013\007\001\002\000\006\002\000\004" +
    "\000\001\002\000\004\021\035\001\002\000\016\011\022" +
    "\014\021\015\026\016\024\017\025\020\023\001\002\000" +
    "\004\021\014\001\002\000\004\021\014\001\002\000\006" +
    "\012\ufff5\013\ufff5\001\002\000\006\012\016\013\ufffe\001" +
    "\002\000\004\021\017\001\002\000\006\012\ufff4\013\ufff4" +
    "\001\002\000\006\012\016\013\ufffd\001\002\000\004\021" +
    "\034\001\002\000\004\021\033\001\002\000\004\021\032" +
    "\001\002\000\004\021\031\001\002\000\004\021\030\001" +
    "\002\000\004\021\027\001\002\000\004\013\ufffa\001\002" +
    "\000\004\013\ufff8\001\002\000\004\013\ufff9\001\002\000" +
    "\004\013\ufff7\001\002\000\004\013\ufff6\001\002\000\004" +
    "\013\ufffb\001\002\000\004\013\ufffc\001\002\000\004\013" +
    "\040\001\002\000\004\002\001\001\002\000\006\002\uffff" +
    "\004\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\002\003\003\005\001\001\000\004\003" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\017\001\001\000\004\004\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CMSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CMSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CMSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public CMSParser(CMSLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();

        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\tTipo: " + s.sym);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        DashBoard.ERRORS.add(err);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        DashBoard.ERRORS.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CMSParser$actions {
  private final CMSParser parser;

  /** Constructor */
  CUP$CMSParser$actions(CMSParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CMSParser$do_action_part00000000(
    int                        CUP$CMSParser$act_num,
    java_cup.runtime.lr_parser CUP$CMSParser$parser,
    java.util.Stack            CUP$CMSParser$stack,
    int                        CUP$CMSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CMSParser$result;

      /* select the action based on the action number */
      switch (CUP$CMSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= querys EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-1)).value;
		RESULT = start_val;
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-1)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CMSParser$parser.done_parsing();
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // querys ::= query P_COMA 
            {
              Object RESULT =null;

              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("querys",0, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-1)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // querys ::= querys query P_COMA 
            {
              Object RESULT =null;

              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("querys",0, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // query ::= CONSULTAR VISITAS_SITIO paths 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultVisitsSites(ps);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // query ::= CONSULTAR VISITAS_PAGINA paths 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		ArrayList<String> ps = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultVisitsPages(ps);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // query ::= CONSULTAR PAGINAS_P PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultPopularPages(p);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // query ::= CONSULTAR COMPONENTE TITULO PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultComponents(p, 1);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-3)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // query ::= CONSULTAR COMPONENTE PARRAFO PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultComponents(p, 2);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-3)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // query ::= CONSULTAR COMPONENTE IMAGEN PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultComponents(p, 3);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-3)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // query ::= CONSULTAR COMPONENTE VIDEO PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultComponents(p, 4);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-3)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // query ::= CONSULTAR COMPONENTE MENU PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultComponents(p, 5);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-3)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // query ::= CONSULTAR COMPONENTE TODOS PATH 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
                Query.consultComponents(p, 6);
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("query",1, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-3)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paths ::= PATH 
            {
              ArrayList<String> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
            ArrayList<String> v = new ArrayList<>();
            v.add(p);
            RESULT = v;
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("paths",2, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paths ::= paths COMA PATH 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)).right;
		ArrayList<String> v = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$CMSParser$stack.peek()).value;
		
            v.add(p);
            RESULT = v;
            
              CUP$CMSParser$result = parser.getSymbolFactory().newSymbol("paths",2, ((java_cup.runtime.Symbol)CUP$CMSParser$stack.elementAt(CUP$CMSParser$top-2)), ((java_cup.runtime.Symbol)CUP$CMSParser$stack.peek()), RESULT);
            }
          return CUP$CMSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CMSParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CMSParser$do_action(
    int                        CUP$CMSParser$act_num,
    java_cup.runtime.lr_parser CUP$CMSParser$parser,
    java.util.Stack            CUP$CMSParser$stack,
    int                        CUP$CMSParser$top)
    throws java.lang.Exception
    {
              return CUP$CMSParser$do_action_part00000000(
                               CUP$CMSParser$act_num,
                               CUP$CMSParser$parser,
                               CUP$CMSParser$stack,
                               CUP$CMSParser$top);
    }
}

}

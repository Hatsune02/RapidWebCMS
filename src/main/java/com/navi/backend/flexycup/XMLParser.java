
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.backend.flexycup;

import java_cup.runtime.*;
import javax.swing.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\012\000\002\003\007\000\002\004\004" +
    "\000\002\004\003\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\006" +
    "\006\000\002\007\006\000\002\010\003\000\002\011\004" +
    "\000\002\011\004\000\002\012\004\000\002\012\004\000" +
    "\002\013\012\000\002\014\004\000\002\014\003\000\002" +
    "\015\007\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\016\006\000\002\017\006\000\002\020\012\000\002" +
    "\021\004\000\002\021\003\000\002\022\011\000\002\023" +
    "\012\000\002\024\004\000\002\024\003\000\002\025\007" +
    "\000\002\025\007\000\002\025\007\000\002\025\007\000" +
    "\002\025\007\000\002\025\007\000\002\025\007\000\002" +
    "\025\007\000\002\026\006\000\002\027\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\006\003\006\051\007\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\051\275" +
    "\001\002\000\006\004\272\005\271\001\002\000\004\002" +
    "\270\001\002\000\022\016\017\017\015\020\016\021\021" +
    "\022\012\023\020\024\013\025\014\001\002\000\004\050" +
    "\265\001\002\000\004\050\262\001\002\000\004\050\257" +
    "\001\002\000\004\050\254\001\002\000\004\050\223\001" +
    "\002\000\004\050\220\001\002\000\004\050\125\001\002" +
    "\000\004\050\022\001\002\000\004\051\024\001\002\000" +
    "\004\051\ufff0\001\002\000\004\007\033\001\002\000\004" +
    "\051\026\001\002\000\004\047\030\001\002\000\006\002" +
    "\ufff7\051\ufff7\001\002\000\004\005\031\001\002\000\004" +
    "\050\032\001\002\000\006\002\ufff1\051\ufff1\001\002\000" +
    "\004\050\034\001\002\000\004\051\037\001\002\000\004" +
    "\051\120\001\002\000\026\026\053\027\044\030\054\031" +
    "\051\032\055\033\046\034\045\035\047\036\050\037\052" +
    "\001\002\000\004\010\041\001\002\000\004\051\uffe9\001" +
    "\002\000\004\006\042\001\002\000\004\052\043\001\002" +
    "\000\026\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\001\002\000\004" +
    "\050\115\001\002\000\004\050\112\001\002\000\004\050" +
    "\107\001\002\000\004\050\104\001\002\000\004\050\101" +
    "\001\002\000\004\050\076\001\002\000\004\050\073\001" +
    "\002\000\004\050\070\001\002\000\004\050\065\001\002" +
    "\000\004\050\056\001\002\000\004\053\057\001\002\000" +
    "\004\051\060\001\002\000\004\047\062\001\002\000\004" +
    "\051\uffe4\001\002\000\004\010\063\001\002\000\004\050" +
    "\064\001\002\000\004\051\uffdd\001\002\000\004\053\066" +
    "\001\002\000\004\051\060\001\002\000\004\051\uffe6\001" +
    "\002\000\004\053\071\001\002\000\004\051\060\001\002" +
    "\000\004\051\uffe8\001\002\000\004\053\074\001\002\000" +
    "\004\051\060\001\002\000\004\051\uffdf\001\002\000\004" +
    "\053\077\001\002\000\004\051\060\001\002\000\004\051" +
    "\uffe5\001\002\000\004\053\102\001\002\000\004\051\060" +
    "\001\002\000\004\051\uffe0\001\002\000\004\053\105\001" +
    "\002\000\004\051\060\001\002\000\004\051\uffe1\001\002" +
    "\000\004\053\110\001\002\000\004\051\060\001\002\000" +
    "\004\051\uffe3\001\002\000\004\053\113\001\002\000\004" +
    "\051\060\001\002\000\004\051\uffe2\001\002\000\004\053" +
    "\116\001\002\000\004\051\060\001\002\000\004\051\uffe7" +
    "\001\002\000\006\010\041\047\122\001\002\000\004\051" +
    "\uffea\001\002\000\004\007\123\001\002\000\004\050\124" +
    "\001\002\000\004\051\uffeb\001\002\000\004\051\131\001" +
    "\002\000\004\051\024\001\002\000\004\051\026\001\002" +
    "\000\004\051\215\001\002\000\006\007\033\014\132\001" +
    "\002\000\004\050\133\001\002\000\004\051\135\001\002" +
    "\000\004\051\207\001\002\000\004\015\204\001\002\000" +
    "\022\035\146\040\140\041\142\042\141\043\143\044\144" +
    "\045\145\046\147\001\002\000\004\051\uffd6\001\002\000" +
    "\004\050\201\001\002\000\004\050\176\001\002\000\004" +
    "\050\173\001\002\000\004\050\170\001\002\000\004\050" +
    "\165\001\002\000\004\050\162\001\002\000\004\050\157" +
    "\001\002\000\004\050\150\001\002\000\004\053\151\001" +
    "\002\000\004\051\153\001\002\000\004\051\uffce\001\002" +
    "\000\004\047\154\001\002\000\004\015\155\001\002\000" +
    "\004\050\156\001\002\000\004\051\uffcc\001\002\000\004" +
    "\053\160\001\002\000\004\051\153\001\002\000\004\051" +
    "\uffcf\001\002\000\004\053\163\001\002\000\004\051\153" +
    "\001\002\000\004\051\uffd0\001\002\000\004\053\166\001" +
    "\002\000\004\051\153\001\002\000\004\051\uffd1\001\002" +
    "\000\004\053\171\001\002\000\004\051\153\001\002\000" +
    "\004\051\uffd2\001\002\000\004\053\174\001\002\000\004" +
    "\051\153\001\002\000\004\051\uffd4\001\002\000\004\053" +
    "\177\001\002\000\004\051\153\001\002\000\004\051\uffd3" +
    "\001\002\000\004\053\202\001\002\000\004\051\153\001" +
    "\002\000\004\051\uffd5\001\002\000\004\006\205\001\002" +
    "\000\004\052\206\001\002\000\022\035\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\001\002" +
    "\000\006\015\204\047\211\001\002\000\004\051\uffd7\001" +
    "\002\000\004\014\212\001\002\000\004\050\213\001\002" +
    "\000\004\051\uffd8\001\002\000\004\051\uffed\001\002\000" +
    "\004\014\132\001\002\000\006\002\ufff5\051\ufff5\001\002" +
    "\000\004\051\uffec\001\002\000\004\051\024\001\002\000" +
    "\004\051\026\001\002\000\006\002\ufffa\051\ufffa\001\002" +
    "\000\004\051\225\001\002\000\004\051\252\001\002\000" +
    "\006\007\033\011\232\001\002\000\004\051\026\001\002" +
    "\000\004\051\024\001\002\000\004\051\uffee\001\002\000" +
    "\006\002\ufff8\051\ufff8\001\002\000\004\050\233\001\002" +
    "\000\004\051\236\001\002\000\004\051\246\001\002\000" +
    "\004\051\uffda\001\002\000\004\012\237\001\002\000\004" +
    "\013\240\001\002\000\004\052\241\001\002\000\004\054" +
    "\242\001\002\000\004\047\243\001\002\000\004\050\244" +
    "\001\002\000\004\051\uffd9\001\002\000\004\051\uffdb\001" +
    "\002\000\006\012\237\047\247\001\002\000\004\011\250" +
    "\001\002\000\004\050\251\001\002\000\004\051\uffdc\001" +
    "\002\000\004\011\232\001\002\000\004\051\uffef\001\002" +
    "\000\004\051\024\001\002\000\004\051\026\001\002\000" +
    "\006\002\ufff9\051\ufff9\001\002\000\004\051\131\001\002" +
    "\000\004\051\026\001\002\000\006\002\ufff3\051\ufff3\001" +
    "\002\000\004\051\131\001\002\000\004\051\026\001\002" +
    "\000\006\002\ufff4\051\ufff4\001\002\000\004\051\225\001" +
    "\002\000\004\051\026\001\002\000\006\002\ufff6\051\ufff6" +
    "\001\002\000\004\002\001\001\002\000\004\006\304\001" +
    "\002\000\004\050\273\001\002\000\004\051\275\001\002" +
    "\000\004\051\ufffb\001\002\000\004\005\271\001\002\000" +
    "\004\051\300\001\002\000\004\051\ufffc\001\002\000\006" +
    "\005\271\047\301\001\002\000\004\004\302\001\002\000" +
    "\004\050\303\001\002\000\004\002\ufffe\001\002\000\004" +
    "\052\305\001\002\000\022\016\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2\001\002\000\004" +
    "\051\307\001\002\000\006\004\310\005\271\001\002\000" +
    "\004\050\311\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\002\007\003\003\005\004\006\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\305" +
    "\005\273\006\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\024\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\034\015\037\016\035" +
    "\001\001\000\006\015\120\016\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\102\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\110\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\126\013\127\023\125\001\001" +
    "\000\004\013\216\001\001\000\004\007\215\001\001\000" +
    "\004\023\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\133\025\136\026\135\001\001\000\006\025" +
    "\207\026\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\220\013\022\001\001\000" +
    "\004\007\221\001\001\000\002\001\001\000\010\011\225" +
    "\013\223\020\226\001\001\000\004\020\252\001\001\000" +
    "\002\001\001\000\004\007\230\001\001\000\004\013\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\233\022\234\001\001\000\004\022\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\254\013\022\001\001\000\004\007\255\001\001\000\002" +
    "\001\001\000\010\012\257\013\127\023\125\001\001\000" +
    "\004\007\260\001\001\000\002\001\001\000\010\012\262" +
    "\013\127\023\125\001\001\000\004\007\263\001\001\000" +
    "\002\001\001\000\010\011\265\013\223\020\226\001\001" +
    "\000\004\007\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\275" +
    "\005\273\006\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\276\006\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\276\006\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //public ArrayList<FileTextPane> panes = new ArrayList<>();
    public XMLParser(Lexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme = s.value.toString();

        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\tTipo: " + s.sym);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        //Querys.errors.add(err);
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme = s.value.toString();
        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        //Querys.errors.add(err);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= actions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // actions ::= accion 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // actions ::= acciones 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // acciones ::= MENOR ACCIONES MAYOR accionP MENOR SLASH ACCIONES MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("acciones",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // acciones ::= error accionP MENOR ACCIONES MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("acciones",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // accionP ::= accionP accion 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accionP",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accionP ::= accion 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accionP",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // accion ::= accion_open NUEVO_SITIO_WEB MAYOR action_bodyP accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion ::= accion_open BORRRAR_SITIO_WEB MAYOR action_bodyP accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accion ::= accion_open NUEVA_PAGINA MAYOR action_bodyPE accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accion ::= accion_open BORRAR_PAGINA MAYOR action_bodyP accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // accion ::= accion_open MODIFICAR_PAGINA MAYOR action_bodyPE accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // accion ::= accion_open AGREGAR_COMPONENTE MAYOR action_bodyPA accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // accion ::= accion_open BORRAR_COMPONENTE MAYOR action_bodyPA accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // accion ::= accion_open MODIFICAR_COMPONENTE MAYOR action_bodyPA accion_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // accion_open ::= MENOR ACCION NOMBRE EQUAL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion_open",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // accion_close ::= MENOR SLASH ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion_close",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // action_bodyP ::= parameters 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyP",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // action_bodyPE ::= parameters etiquetas 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPE",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // action_bodyPE ::= etiquetas parameters 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPE",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // action_bodyPA ::= parameters atributos 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPA",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // action_bodyPA ::= atributos parameters 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPA",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parameters ::= MENOR PARAMETROS MAYOR parametrosP MENOR SLASH PARAMETROS MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parametrosP ::= parametrosP parameters_p 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parametrosP",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametrosP ::= parameters_p 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parametrosP",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parameters_p ::= parameter_open ID MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parameters_p ::= parameter_open USUARIO_CREACION MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters_p ::= parameter_open FECHA_CREACION MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters_p ::= parameter_open FECHA_MODIFICACION MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parameters_p ::= parameter_open USUARIO_MODIFICACION MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parameters_p ::= parameter_open TITULO MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parameters_p ::= parameter_open SITIO MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters_p ::= parameter_open PADRE MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameters_p ::= parameter_open PAGINA MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameters_p ::= parameter_open CLASE MAYOR PARAM parameter_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters_p",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_open ::= MENOR PARAMETRO NOMBRE EQUAL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_open",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter_close ::= MENOR SLASH PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_close",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // etiquetas ::= MENOR ETIQUETAS MAYOR etiquetaP MENOR SLASH ETIQUETAS MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetas",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // etiquetaP ::= etiquetaP etiqueta 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetaP",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // etiquetaP ::= etiqueta 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetaP",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // etiqueta ::= MENOR ETIQUETA VALOR EQUAL CADENA SLASH MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiqueta",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atributos ::= MENOR ATRIBUTOS MAYOR atributoP MENOR SLASH ATRIBUTOS MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atributoP ::= atributoP atributes_p 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributoP",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atributoP ::= atributes_p 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributoP",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atributes_p ::= atributo_open TEXTO MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // atributes_p ::= atributo_open ALINEACION MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atributes_p ::= atributo_open COLOR MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atributes_p ::= atributo_open ORIGEN MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atributes_p ::= atributo_open ALTURA MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // atributes_p ::= atributo_open ANCHO MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributes_p ::= atributo_open PADRE MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributes_p ::= atributo_open ETIQUETAS_NOMBRE MAYOR PARAM atributo_close 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributo_open ::= MENOR ATRIBUTO NOMBRE EQUAL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo_open",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributo_close ::= MENOR SLASH ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo_close",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.navi.backend.XMLParserLexer;

import java_cup.runtime.*;
import com.navi.backend.webController.*;
import com.navi.UI.*;
import javax.swing.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class XMLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public XMLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XMLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public XMLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\012\000\002\003\007\000\002\013\003" +
    "\000\002\013\004\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\012\007\000\002\012\007\000\002\012\007\000\002\012" +
    "\004\000\002\004\006\000\002\005\006\000\002\021\003" +
    "\000\002\015\004\000\002\015\004\000\002\015\004\000" +
    "\002\015\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\017\012\000\002\017" +
    "\007\000\002\020\003\000\002\020\004\000\002\020\004" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\007\000\002\016\007\000\002" +
    "\016\007\000\002\016\007\000\002\016\007\000\002\016" +
    "\007\000\002\016\004\000\002\006\006\000\002\007\006" +
    "\000\002\023\012\000\002\023\007\000\002\024\003\000" +
    "\002\024\004\000\002\022\011\000\002\026\012\000\002" +
    "\026\007\000\002\027\003\000\002\027\004\000\002\027" +
    "\004\000\002\025\007\000\002\025\007\000\002\025\007" +
    "\000\002\025\007\000\002\025\007\000\002\025\007\000" +
    "\002\025\007\000\002\025\007\000\002\025\004\000\002" +
    "\010\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\006\003\006\051\007\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\006\003\343" +
    "\051\357\001\002\000\006\004\341\005\340\001\002\000" +
    "\004\002\337\001\002\000\022\016\017\017\015\020\016" +
    "\021\021\022\012\023\020\024\013\025\014\001\002\000" +
    "\004\050\334\001\002\000\004\050\331\001\002\000\004" +
    "\050\326\001\002\000\004\050\323\001\002\000\004\050" +
    "\256\001\002\000\004\050\253\001\002\000\004\050\137" +
    "\001\002\000\004\050\022\001\002\000\006\003\023\051" +
    "\025\001\002\000\004\051\133\001\002\000\004\051\uffef" +
    "\001\002\000\004\007\034\001\002\000\004\051\027\001" +
    "\002\000\004\047\031\001\002\000\010\002\ufff7\003\ufff7" +
    "\051\ufff7\001\002\000\004\005\032\001\002\000\004\050" +
    "\033\001\002\000\010\002\ufff0\003\ufff0\051\ufff0\001\002" +
    "\000\004\050\035\001\002\000\006\003\037\051\041\001" +
    "\002\000\006\003\122\051\126\001\002\000\006\003\122" +
    "\051\123\001\002\000\026\026\055\027\046\030\056\031" +
    "\053\032\057\033\050\034\047\035\051\036\052\037\054" +
    "\001\002\000\004\010\043\001\002\000\006\003\uffe4\051" +
    "\uffe4\001\002\000\004\006\044\001\002\000\004\052\045" +
    "\001\002\000\026\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\001\002" +
    "\000\004\050\117\001\002\000\004\050\114\001\002\000" +
    "\004\050\111\001\002\000\004\050\106\001\002\000\004" +
    "\050\103\001\002\000\004\050\100\001\002\000\004\050" +
    "\075\001\002\000\004\050\072\001\002\000\004\050\067" +
    "\001\002\000\004\050\060\001\002\000\004\054\061\001" +
    "\002\000\004\051\062\001\002\000\004\047\064\001\002" +
    "\000\006\003\uffdd\051\uffdd\001\002\000\004\010\065\001" +
    "\002\000\004\050\066\001\002\000\006\003\uffd5\051\uffd5" +
    "\001\002\000\004\054\070\001\002\000\004\051\062\001" +
    "\002\000\006\003\uffdf\051\uffdf\001\002\000\004\054\073" +
    "\001\002\000\004\051\062\001\002\000\006\003\uffe1\051" +
    "\uffe1\001\002\000\004\054\076\001\002\000\004\051\062" +
    "\001\002\000\006\003\uffd8\051\uffd8\001\002\000\004\054" +
    "\101\001\002\000\004\051\062\001\002\000\006\003\uffde" +
    "\051\uffde\001\002\000\004\054\104\001\002\000\004\051" +
    "\062\001\002\000\006\003\uffd9\051\uffd9\001\002\000\004" +
    "\054\107\001\002\000\004\051\062\001\002\000\006\003" +
    "\uffda\051\uffda\001\002\000\004\054\112\001\002\000\004" +
    "\051\062\001\002\000\006\003\uffdc\051\uffdc\001\002\000" +
    "\004\054\115\001\002\000\004\051\062\001\002\000\006" +
    "\003\uffdb\051\uffdb\001\002\000\004\054\120\001\002\000" +
    "\004\051\062\001\002\000\006\003\uffe0\051\uffe0\001\002" +
    "\000\004\051\062\001\002\000\006\010\043\047\064\001" +
    "\002\000\006\003\uffd7\051\uffd7\001\002\000\006\003\uffe2" +
    "\051\uffe2\001\002\000\006\010\043\047\130\001\002\000" +
    "\006\003\uffe3\051\uffe3\001\002\000\004\007\131\001\002" +
    "\000\004\050\132\001\002\000\006\003\uffe6\051\uffe6\001" +
    "\002\000\004\047\134\001\002\000\004\007\135\001\002" +
    "\000\004\050\136\001\002\000\006\003\uffe5\051\uffe5\001" +
    "\002\000\006\003\142\051\144\001\002\000\006\003\023" +
    "\051\025\001\002\000\004\051\027\001\002\000\006\003" +
    "\244\051\246\001\002\000\006\003\235\051\236\001\002" +
    "\000\006\007\034\014\145\001\002\000\004\050\146\001" +
    "\002\000\006\003\151\051\152\001\002\000\006\003\uffcd" +
    "\051\uffcd\001\002\000\006\003\225\051\230\001\002\000" +
    "\006\003\225\051\226\001\002\000\004\015\220\001\002" +
    "\000\022\035\162\040\154\041\156\042\155\043\157\044" +
    "\160\045\161\046\163\001\002\000\004\050\215\001\002" +
    "\000\004\050\212\001\002\000\004\050\207\001\002\000" +
    "\004\050\204\001\002\000\004\050\201\001\002\000\004" +
    "\050\176\001\002\000\004\050\173\001\002\000\004\050" +
    "\164\001\002\000\004\054\165\001\002\000\004\051\167" +
    "\001\002\000\006\003\uffc3\051\uffc3\001\002\000\004\047" +
    "\170\001\002\000\004\015\171\001\002\000\004\050\172" +
    "\001\002\000\006\003\uffc0\051\uffc0\001\002\000\004\054" +
    "\174\001\002\000\004\051\167\001\002\000\006\003\uffc4" +
    "\051\uffc4\001\002\000\004\054\177\001\002\000\004\051" +
    "\167\001\002\000\006\003\uffc5\051\uffc5\001\002\000\004" +
    "\054\202\001\002\000\004\051\167\001\002\000\006\003" +
    "\uffc6\051\uffc6\001\002\000\004\054\205\001\002\000\004" +
    "\051\167\001\002\000\006\003\uffc7\051\uffc7\001\002\000" +
    "\004\054\210\001\002\000\004\051\167\001\002\000\006" +
    "\003\uffc9\051\uffc9\001\002\000\004\054\213\001\002\000" +
    "\004\051\167\001\002\000\006\003\uffc8\051\uffc8\001\002" +
    "\000\004\054\216\001\002\000\004\051\167\001\002\000" +
    "\006\003\uffca\051\uffca\001\002\000\004\006\221\001\002" +
    "\000\004\052\222\001\002\000\022\035\uffc1\040\uffc1\041" +
    "\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\001\002" +
    "\000\006\003\uffcb\051\uffcb\001\002\000\006\003\uffc2\051" +
    "\uffc2\001\002\000\004\051\167\001\002\000\006\015\220" +
    "\047\170\001\002\000\006\003\uffcc\051\uffcc\001\002\000" +
    "\006\015\220\047\231\001\002\000\004\014\232\001\002" +
    "\000\004\050\233\001\002\000\006\003\uffcf\051\uffcf\001" +
    "\002\000\004\051\uffea\001\002\000\004\051\237\001\002" +
    "\000\004\014\145\001\002\000\004\047\240\001\002\000" +
    "\004\014\241\001\002\000\004\050\242\001\002\000\006" +
    "\003\uffce\051\uffce\001\002\000\004\051\uffe8\001\002\000" +
    "\004\051\250\001\002\000\004\051\uffe7\001\002\000\010" +
    "\007\034\014\145\047\247\001\002\000\006\007\135\014" +
    "\241\001\002\000\004\047\247\001\002\000\010\002\ufff5" +
    "\003\ufff5\051\ufff5\001\002\000\004\051\uffe9\001\002\000" +
    "\006\003\023\051\025\001\002\000\004\051\027\001\002" +
    "\000\010\002\ufffa\003\ufffa\051\ufffa\001\002\000\006\003" +
    "\257\051\261\001\002\000\006\003\315\051\317\001\002" +
    "\000\006\003\306\051\307\001\002\000\006\007\034\011" +
    "\266\001\002\000\004\051\027\001\002\000\006\003\023" +
    "\051\025\001\002\000\004\051\uffed\001\002\000\010\002" +
    "\ufff8\003\ufff8\051\ufff8\001\002\000\004\050\267\001\002" +
    "\000\004\051\272\001\002\000\004\051\302\001\002\000" +
    "\004\051\uffd2\001\002\000\004\012\273\001\002\000\004" +
    "\013\274\001\002\000\004\052\275\001\002\000\004\055" +
    "\276\001\002\000\004\047\277\001\002\000\004\050\300" +
    "\001\002\000\004\051\uffd0\001\002\000\004\051\uffd1\001" +
    "\002\000\006\012\273\047\303\001\002\000\004\011\304" +
    "\001\002\000\004\050\305\001\002\000\006\003\uffd4\051" +
    "\uffd4\001\002\000\004\051\311\001\002\000\004\011\266" +
    "\001\002\000\004\051\uffee\001\002\000\004\047\312\001" +
    "\002\000\004\011\313\001\002\000\004\050\314\001\002" +
    "\000\006\003\uffd3\051\uffd3\001\002\000\004\051\322\001" +
    "\002\000\004\051\uffeb\001\002\000\010\007\034\011\266" +
    "\047\321\001\002\000\004\051\uffec\001\002\000\006\007" +
    "\135\011\313\001\002\000\004\047\321\001\002\000\006" +
    "\003\023\051\025\001\002\000\004\051\027\001\002\000" +
    "\010\002\ufff9\003\ufff9\051\ufff9\001\002\000\006\003\142" +
    "\051\144\001\002\000\004\051\027\001\002\000\010\002" +
    "\ufff3\003\ufff3\051\ufff3\001\002\000\006\003\023\051\025" +
    "\001\002\000\004\051\027\001\002\000\010\002\ufff4\003" +
    "\ufff4\051\ufff4\001\002\000\006\003\257\051\261\001\002" +
    "\000\004\051\027\001\002\000\010\002\ufff6\003\ufff6\051" +
    "\ufff6\001\002\000\004\002\001\001\002\000\004\006\355" +
    "\001\002\000\004\050\342\001\002\000\006\003\343\051" +
    "\345\001\002\000\004\051\027\001\002\000\006\003\ufffc" +
    "\051\ufffc\001\002\000\004\005\340\001\002\000\006\003" +
    "\343\051\350\001\002\000\006\003\ufffb\051\ufffb\001\002" +
    "\000\006\005\340\047\351\001\002\000\004\004\352\001" +
    "\002\000\004\050\353\001\002\000\004\002\ufffe\001\002" +
    "\000\010\002\ufff2\003\ufff2\051\ufff2\001\002\000\004\052" +
    "\356\001\002\000\022\016\ufff1\017\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\001\002\000\006\005" +
    "\340\047\031\001\002\000\006\003\343\051\361\001\002" +
    "\000\006\004\362\005\340\001\002\000\004\050\363\001" +
    "\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\012\002\007\003\003\004\010\012\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\010" +
    "\005\353\012\343\013\357\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\023\021\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\037\016\041\020\035\001\001\000\006\006\037\016" +
    "\126\001\001\000\010\006\037\007\123\016\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\120\001\001\000\002\001\001\000" +
    "\004\007\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\140\017\142\026\137\001\001\000\004" +
    "\017\251\001\001\000\004\005\250\001\001\000\006\017" +
    "\244\026\242\001\001\000\004\026\233\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\152\025\146\027" +
    "\147\001\001\000\002\001\001\000\006\010\152\025\226" +
    "\001\001\000\010\010\152\011\223\025\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\023\021\253\001\001\000" +
    "\004\005\254\001\001\000\002\001\001\000\010\015\261" +
    "\017\257\023\262\001\001\000\006\017\315\023\317\001" +
    "\001\000\004\023\307\001\001\000\002\001\001\000\004" +
    "\005\264\001\001\000\004\017\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\270" +
    "\024\267\001\001\000\004\022\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\023\021\323\001\001\000\004\005\324\001\001\000\002" +
    "\001\001\000\010\014\326\017\142\026\137\001\001\000" +
    "\004\005\327\001\001\000\002\001\001\000\006\017\023" +
    "\021\331\001\001\000\004\005\332\001\001\000\002\001" +
    "\001\000\010\015\334\017\257\023\262\001\001\000\004" +
    "\005\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\010\012\343" +
    "\013\345\001\001\000\004\005\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\010\012\346\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\010\012\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XMLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$XMLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XMLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Actions actions = new Actions();
    private boolean valid = true;
    public XMLParser(XMLLexer lex) {
        super(lex);
    }
    //Metodo al que se llama ante algun error sintactico
    public void syntax_error(Symbol s){
        String lexeme;
        if(s.value==null) lexeme = "Unknown";
        else lexeme = s.value.toString();

        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTÁCTICO RECUPERADO");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\tTipo: " + s.sym);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        DashBoard.ERRORS.add(err);
        valid = false;
    }

    //Metodo que se llama en el momento en que ya no es posible una recuperacion
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexeme;
        if(s.value==null) lexeme = "Unknown";
        else lexeme = s.value.toString();

        int line = s.left;
        int col = s.right;
        System.out.println("ERROR SINTACTICO NO RECUPERABLE");
        System.out.println("\tLexeme: " + lexeme);
        System.out.println("\trow: " + line);
        System.out.println("\tcol: " + col);
        TError err = new TError(lexeme,"Error Sintáctico", "Token no esperado", line, col);
        DashBoard.ERRORS.add(err);
        valid = false;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$XMLParser$actions {
  private final XMLParser parser;

  /** Constructor */
  CUP$XMLParser$actions(XMLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action_part00000000(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$XMLParser$result;

      /* select the action based on the action number */
      switch (CUP$XMLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= actions EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		RESULT = start_val;
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$XMLParser$parser.done_parsing();
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // actions ::= accion 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // actions ::= acciones 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("actions",0, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // acciones ::= MENOR ACCIONES MAYOR accionP MENOR SLASH ACCIONES MAYOR 
            {
              Object RESULT =null;
		int actleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		ArrayList<AllActions> act = (ArrayList<AllActions>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		
            if(valid){
                for(var a: act){
                    a.execute();
                }
            }
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("acciones",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // acciones ::= error accionP MENOR ACCIONES MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("acciones",1, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // accionP ::= accion 
            {
              ArrayList<AllActions> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		AllActions a = (AllActions)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
            ArrayList<AllActions> allActions = new ArrayList<>();
            allActions.add(a);
            RESULT = allActions;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accionP",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // accionP ::= accionP accion 
            {
              ArrayList<AllActions> RESULT =null;
		int allActionsleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int allActionsright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<AllActions> allActions = (ArrayList<AllActions>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		AllActions a = (AllActions)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
            allActions.add(a);
            RESULT = allActions;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accionP",9, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // accion ::= accion_open NUEVO_SITIO_WEB MAYOR action_bodyP accion_close 
            {
              AllActions RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 1, listP, null, null);
            //actions.createSite(listP);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // accion ::= accion_open BORRRAR_SITIO_WEB MAYOR action_bodyP accion_close 
            {
              AllActions RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 2, listP, null, null);
            //actions.deleteSite(listP);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // accion ::= accion_open NUEVA_PAGINA MAYOR action_bodyPE accion_close 
            {
              AllActions RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ActionPE a = (ActionPE)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 3, null, null, a);
            //actions.createPage(a);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // accion ::= accion_open BORRAR_PAGINA MAYOR action_bodyP accion_close 
            {
              AllActions RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 4, listP, null, null);
            //actions.deletePage(listP);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // accion ::= accion_open MODIFICAR_PAGINA MAYOR action_bodyPE accion_close 
            {
              AllActions RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ActionPE a = (ActionPE)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 5, null, null, a);
            //actions.editPage(a);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // accion ::= accion_open AGREGAR_COMPONENTE MAYOR action_bodyPA accion_close 
            {
              AllActions RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ActionPA a = (ActionPA)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 6, null, a, null);
            //actions.createComponent(a);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // accion ::= accion_open BORRAR_COMPONENTE MAYOR action_bodyP accion_close 
            {
              AllActions RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 7, listP, null, null);
            //actions.deleteComponent(listP);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // accion ::= accion_open MODIFICAR_COMPONENTE MAYOR action_bodyPA accion_close 
            {
              AllActions RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ActionPA a = (ActionPA)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new AllActions(actions, 8, null, a, null);
            //actions.editComponent(a);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // accion ::= error accion_close 
            {
              AllActions RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion",8, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // accion_open ::= MENOR ACCION NOMBRE EQUAL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion_open",2, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // accion_close ::= MENOR SLASH ACCION MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("accion_close",3, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // action_bodyP ::= parameters 
            {
              ArrayList<Parameter> RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
                RESULT = listP;
                
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyP",15, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // action_bodyPE ::= parameters etiquetas 
            {
              ActionPE RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int listEleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		ArrayList<Label> listE = (ArrayList<Label>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
                RESULT = new ActionPE(listP, listE);
                
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPE",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // action_bodyPE ::= etiquetas parameters 
            {
              ActionPE RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Label> listE = (ArrayList<Label>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
                RESULT = new ActionPE(listP, listE);
                
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPE",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // action_bodyPE ::= error etiquetas 
            {
              ActionPE RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPE",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // action_bodyPE ::= error parameters 
            {
              ActionPE RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPE",11, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_bodyPA ::= parameters atributos 
            {
              ActionPA RESULT =null;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int listAleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int listAright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		ArrayList<Attribute> listA = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
              RESULT = new ActionPA(listP, listA);
              
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPA",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // action_bodyPA ::= atributos parameters 
            {
              ActionPA RESULT =null;
		int listAleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int listAright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Attribute> listA = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		ArrayList<Parameter> listP = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
              RESULT = new ActionPA(listP, listA);
              
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPA",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // action_bodyPA ::= error atributos 
            {
              ActionPA RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPA",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // action_bodyPA ::= error parameters 
            {
              ActionPA RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("action_bodyPA",10, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parameters ::= MENOR PARAMETROS MAYOR parametrosP MENOR SLASH PARAMETROS MAYOR 
            {
              ArrayList<Parameter> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		ArrayList<Parameter> list = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		
            RESULT = list;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parameters ::= error MENOR SLASH PARAMETROS MAYOR 
            {
              ArrayList<Parameter> RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametrosP ::= parameter_p 
            {
              ArrayList<Parameter> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
            ArrayList<Parameter> a = new ArrayList<>();
            a.add(p);
            RESULT = a;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parametrosP",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametrosP ::= parametrosP parameter_p 
            {
              ArrayList<Parameter> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Parameter> a = (ArrayList<Parameter>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Parameter p = (Parameter)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
            a.add(p);
            RESULT = a;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parametrosP",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametrosP ::= error parameter_p 
            {
              ArrayList<Parameter> RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parametrosP",14, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameter_p ::= parameter_open ID MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("ID",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter_p ::= parameter_open USUARIO_CREACION MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("USUARIO_CREACION",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameter_p ::= parameter_open FECHA_CREACION MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("FECHA_CREACION",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_p ::= parameter_open FECHA_MODIFICACION MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("FECHA_MODIFICACION",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter_p ::= parameter_open USUARIO_MODIFICACION MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("USUARIO_MODIFICACION",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter_p ::= parameter_open TITULO MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("TITULO",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_p ::= parameter_open SITIO MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("SITIO",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter_p ::= parameter_open PADRE MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("PADRE",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_p ::= parameter_open PAGINA MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("PAGINA",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter_p ::= parameter_open CLASE MAYOR PARAM parameter_close 
            {
              Parameter RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Parameter("CLASE",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameter_p ::= error parameter_close 
            {
              Parameter RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_p",12, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter_open ::= MENOR PARAMETRO NOMBRE EQUAL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_open",4, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_close ::= MENOR SLASH PARAMETRO MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("parameter_close",5, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // etiquetas ::= MENOR ETIQUETAS MAYOR etiquetaP MENOR SLASH ETIQUETAS MAYOR 
            {
              ArrayList<Label> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		ArrayList<Label> list = (ArrayList<Label>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		
            RESULT = list;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetas",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // etiquetas ::= error MENOR SLASH ETIQUETAS MAYOR 
            {
              ArrayList<Label> RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetas",17, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // etiquetaP ::= etiqueta 
            {
              ArrayList<Label> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Label e = (Label)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
             ArrayList<Label> a = new ArrayList<>();
             a.add(e);
             RESULT = a;
             
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetaP",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // etiquetaP ::= etiquetaP etiqueta 
            {
              ArrayList<Label> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Label> a = (ArrayList<Label>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Label e = (Label)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
             a.add(e);
             RESULT = a;
             
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiquetaP",18, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // etiqueta ::= MENOR ETIQUETA VALOR EQUAL CADENA SLASH MAYOR 
            {
              Label RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-2)).value;
		
            RESULT = new Label(c, cleft, cright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("etiqueta",16, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-6)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // atributos ::= MENOR ATRIBUTOS MAYOR atributoP MENOR SLASH ATRIBUTOS MAYOR 
            {
              ArrayList<Attribute> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).right;
		ArrayList<Attribute> list = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)).value;
		
            RESULT = list;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-7)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // atributos ::= error MENOR SLASH ATRIBUTOS MAYOR 
            {
              ArrayList<Attribute> RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributos",20, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // atributoP ::= attributes_p 
            {
              ArrayList<Attribute> RESULT =null;
		int attleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
             ArrayList<Attribute> a = new ArrayList<>();
             a.add(att);
             RESULT = a;
             
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributoP",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // atributoP ::= atributoP attributes_p 
            {
              ArrayList<Attribute> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		ArrayList<Attribute> a = (ArrayList<Attribute>)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).left;
		int attright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()).right;
		Attribute att = (Attribute)((java_cup.runtime.Symbol) CUP$XMLParser$stack.peek()).value;
		
            a.add(att);
            RESULT = a;
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributoP",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // atributoP ::= error attributes_p 
            {
              ArrayList<Attribute> RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributoP",21, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // attributes_p ::= atributo_open TEXTO MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("TEXTO",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // attributes_p ::= atributo_open ALINEACION MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("ALINEACION",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // attributes_p ::= atributo_open COLOR MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("COLOR",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // attributes_p ::= atributo_open ORIGEN MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("ORIGEN",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // attributes_p ::= atributo_open ALTURA MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("ALTURA",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // attributes_p ::= atributo_open ANCHO MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("ANCHO",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // attributes_p ::= atributo_open PADRE MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("PADRE",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // attributes_p ::= atributo_open ETIQUETAS_NOMBRE MAYOR PARAM atributo_close 
            {
              Attribute RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)).value;
		
            RESULT = new Attribute("ETIQUETAS",p, pleft, pright);
            
              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-4)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // attributes_p ::= error atributo_close 
            {
              Attribute RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("attributes_p",19, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-1)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // atributo_open ::= MENOR ATRIBUTO NOMBRE EQUAL 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo_open",6, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // atributo_close ::= MENOR SLASH ATRIBUTO MAYOR 
            {
              Object RESULT =null;

              CUP$XMLParser$result = parser.getSymbolFactory().newSymbol("atributo_close",7, ((java_cup.runtime.Symbol)CUP$XMLParser$stack.elementAt(CUP$XMLParser$top-3)), ((java_cup.runtime.Symbol)CUP$XMLParser$stack.peek()), RESULT);
            }
          return CUP$XMLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$XMLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$XMLParser$do_action(
    int                        CUP$XMLParser$act_num,
    java_cup.runtime.lr_parser CUP$XMLParser$parser,
    java.util.Stack            CUP$XMLParser$stack,
    int                        CUP$XMLParser$top)
    throws java.lang.Exception
    {
              return CUP$XMLParser$do_action_part00000000(
                               CUP$XMLParser$act_num,
                               CUP$XMLParser$parser,
                               CUP$XMLParser$stack,
                               CUP$XMLParser$top);
    }
}

}
